
/*
 * This stub is generated by cpprpc, DO NOT modify it!
 */

#ifndef CPPRPC_ARITHMETICCLIENTSTUB_HPP
#define CPPRPC_ARITHMETICCLIENTSTUB_HPP

#include <cppjson/Value.hpp>

#include <cpprpc/utils.hpp>
#include <cpprpc/client/BaseClient.hpp>
#include <cppweb/Logger.hpp>
#include <cppweb/Singleton.hpp>

namespace CPPRPC {

static auto& logger = CPPWEB::Singleton<CPPWEB::Logger>::GetInstance();

class ArithmeticClientStub: public CPPWEB::nocopyable{
public:
    ArithmeticClientStub(CPPWEB::EventLoop* loop, const CPPWEB::InetAddress& serverAddress):
            m_client(loop, serverAddress)
    {
        m_client.setConnectionCallback([this](const CPPWEB::TCPConnectionPtr& conn){
            if (conn->isConnected()) {
                INFO(logger, "connected");
                m_conn = conn;
                m_cb(m_conn);
            } else {
                INFO(logger, "disconnected");
                assert(m_conn != nullptr);
                m_cb(m_conn);
            }
        });
    }

    void start() { m_client.start(); }

    void setConnectionCallback(const CPPWEB::ConnectionCallback& cb) {
        m_cb = cb;
    }

    
void add(int32_t left_value, int32_t right_value, const ResponseCallback& cb)
{
    cppjson::Value params(cppjson::TYPE_OBJECT);
    
params.addMember(cppjson::Value("left_value"), cppjson::Value(left_value));

params.addMember(cppjson::Value("right_value"), cppjson::Value(right_value));


    cppjson::Value call(cppjson::TYPE_OBJECT);
    call.addMember(cppjson::Value("jsonrpc"), cppjson::Value("2.0"));
    call.addMember(cppjson::Value("method"), cppjson::Value("Arithmetic.add"));
    call.addMember(cppjson::Value("params"), cppjson::Value(params));

    assert(m_conn != nullptr);
    m_client.sendCall(m_conn, call, cb);
}

void sub(int32_t left_value, int32_t right_value, const ResponseCallback& cb)
{
    cppjson::Value params(cppjson::TYPE_OBJECT);
    
params.addMember(cppjson::Value("left_value"), cppjson::Value(left_value));

params.addMember(cppjson::Value("right_value"), cppjson::Value(right_value));


    cppjson::Value call(cppjson::TYPE_OBJECT);
    call.addMember(cppjson::Value("jsonrpc"), cppjson::Value("2.0"));
    call.addMember(cppjson::Value("method"), cppjson::Value("Arithmetic.sub"));
    call.addMember(cppjson::Value("params"), cppjson::Value(params));

    assert(m_conn != nullptr);
    m_client.sendCall(m_conn, call, cb);
}

    

private:
    CPPWEB::TCPConnectionPtr m_conn;
    CPPWEB::ConnectionCallback m_cb;
    BaseClient m_client;
};

}
#endif //CPPRPC_ARITHMETICCLIENTSTUB_HPP
