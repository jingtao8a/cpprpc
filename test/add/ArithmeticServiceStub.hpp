
/*
 * This stub is generated by cpprpc, DO NOT modify it!
 */
#ifndef CPPRPC_ARITHMETICSERVICESTUB_HPP
#define CPPRPC_ARITHMETICSERVICESTUB_HPP

#include <cppjson/Value.hpp>

#include <cpprpc/utils.hpp>
#include <cpprpc/server/RpcServer.hpp>
#include <cpprpc/server/RpcService.hpp>
#include <cppweb/nocopyable.hpp>

class ArithmeticService;

namespace CPPRPC {

template <typename S>
class ArithmeticServiceStub: public CPPWEB::nocopyable {
protected:
    explicit ArithmeticServiceStub(RpcServer& server) {
        static_assert(std::is_same<S, ArithmeticService>::value, "derived class name should be 'ArithmeticService'");

        auto service = new RpcService;

        service->addReturnProcedure("add", new ReturnProcedure(
        std::bind(&ArithmeticServiceStub::addStub, this, CPPWEB::_1, CPPWEB::_2) , 
"left_value", cppjson::TYPE_INT32, 
"right_value", cppjson::TYPE_INT32));
service->addReturnProcedure("sub", new ReturnProcedure(
        std::bind(&ArithmeticServiceStub::subStub, this, CPPWEB::_1, CPPWEB::_2) , 
"left_value", cppjson::TYPE_INT32, 
"right_value", cppjson::TYPE_INT32));


        server.addService("Arithmetic", service);
    }

private:
    void addStub(cppjson::Value& request, const RpcDoneCallback& done) {
    auto& params = request["params"];

    if (params.isArray()) {
        auto left_value = params[0].getInt32();
auto right_value = params[1].getInt32();

        convert().add(left_value, right_value,  UserDoneCallback(request, done));
    } else {
        auto left_value = params["left_value"].getInt32();
auto right_value = params["right_value"].getInt32();

        convert().add(left_value, right_value,  UserDoneCallback(request, done));
    }
}
void subStub(cppjson::Value& request, const RpcDoneCallback& done) {
    auto& params = request["params"];

    if (params.isArray()) {
        auto left_value = params[0].getInt32();
auto right_value = params[1].getInt32();

        convert().sub(left_value, right_value,  UserDoneCallback(request, done));
    } else {
        auto left_value = params["left_value"].getInt32();
auto right_value = params["right_value"].getInt32();

        convert().sub(left_value, right_value,  UserDoneCallback(request, done));
    }
}


private:
    S& convert() {
        return static_cast<S&>(*this);
    }
};

}

#endif //CPPRPC_ARITHMETICSERVICESTUB_HPP
