
/*
 * This stub is generated by cpprpc, DO NOT modify it!
 */
#ifndef CPPRPC_ECHOSERVICESTUB_HPP
#define CPPRPC_ECHOSERVICESTUB_HPP

#include <cppjson/Value.hpp>

#include <cpprpc/utils.hpp>
#include <cpprpc/server/RpcServer.hpp>
#include <cpprpc/server/RpcService.hpp>
#include <cppweb/nocopyable.hpp>

class EchoService;

namespace CPPRPC {

template <typename S>
class EchoServiceStub: public CPPWEB::nocopyable {
protected:
    explicit EchoServiceStub(RpcServer& server) {
        static_assert(std::is_same<S, EchoService>::value, "derived class name should be 'EchoService'");

        auto service = new RpcService;

        service->addReturnProcedure("Echo", new ReturnProcedure(
        std::bind(&EchoServiceStub::EchoStub, this, CPPWEB::_1, CPPWEB::_2) , 
"message", cppjson::TYPE_STRING));


        server.addService("Echo", service);
    }

private:
    void EchoStub(cppjson::Value& request, const RpcDoneCallback& done) {
    auto& params = request["params"];

    if (params.isArray()) {
        auto message = params[0].getString();

        convert().Echo(message,  UserDoneCallback(request, done));
    } else {
        auto message = params["message"].getString();

        convert().Echo(message,  UserDoneCallback(request, done));
    }
}


private:
    S& convert() {
        return static_cast<S&>(*this);
    }
};

}

#endif //CPPRPC_ECHOSERVICESTUB_HPP
