#include <cpprpc/stub/ServiceStubGenerator.hpp>

namespace CPPRPC {
std::string serviceStubTemplate(
        const std::string& macroName,
        const std::string& userClassName,
        const std::string& stubClassName,
        const std::string& serviceName,
        const std::string& stubProcedureBindings,
        const std::string& stubProcedureDefinitions)
{
    std::string str =
R"(
/*
 * This stub is generated by cpprpc, DO NOT modify it!
 */
#ifndef CPPRPC_[macroName]_HPP
#define CPPRPC_[macroName]_HPP

#include <cppjson/Value.hpp>

#include <cpprpc/utils.hpp>
#include <cpprpc/server/RpcServer.hpp>
#include <cpprpc/server/RpcService.hpp>
#include <cppweb/nocopyable.hpp>

class [userClassName];

namespace CPPRPC {

template <typename S>
class [stubClassName]: public CPPWEB::nocopyable {
protected:
    explicit [stubClassName](RpcServer& server) {
        static_assert(std::is_same<S, [userClassName]>::value, "derived class name should be '[userClassName]'");

        auto service = new RpcService;

        [stubProcedureBindings]

        server.addService("[serviceName]", service);
    }

private:
    [stubProcedureDefinitions]

private:
    S& convert() {
        return static_cast<S&>(*this);
    }
};

}

#endif //CPPRPC_[macroName]_HPP
)";
    replaceAll(str, "[macroName]", macroName);
    replaceAll(str, "[userClassName]", userClassName);
    replaceAll(str, "[stubClassName]", stubClassName);
    replaceAll(str, "[serviceName]", serviceName);
    replaceAll(str, "[stubProcedureBindings]", stubProcedureBindings);
    replaceAll(str, "[stubProcedureDefinitions]", stubProcedureDefinitions);
    return str;
}


std::string stubProcedureBindTemplate(
        const std::string& procedureName,
        const std::string& stubClassName,
        const std::string& stubProcedureName,
        const std::string& procedureParams)
{
    std::string str =
R"(service->addReturnProcedure("[procedureName]", new ReturnProcedure(
        std::bind(&[stubClassName]::[stubProcedureName], this, CPPWEB::_1, CPPWEB::_2) [procedureParams]));)";

    replaceAll(str, "[procedureName]", procedureName);
    replaceAll(str, "[stubClassName]", stubClassName);
    replaceAll(str, "[stubProcedureName]", stubProcedureName);
    replaceAll(str, "[procedureParams]", procedureParams);
    return str;
}

std::string stubNotifyBindTemplate(
        const std::string& notifyName,
        const std::string& stubClassName,
        const std::string& stubNotifyName,
        const std::string& notifyParams)
{
    std::string str =
R"(service->addNotifyProcedure("[notifyName]", new NotifyProcedure(
        std::bind(&[stubClassName]::[stubNotifyName], this, CPPWEB::_1) [notifyParams]));)";

    replaceAll(str, "[notifyName]", notifyName);
    replaceAll(str, "[stubClassName]", stubClassName);
    replaceAll(str, "[stubNotifyName]", stubNotifyName);
    replaceAll(str, "[notifyParams]", notifyParams);
    return str;
}

std::string stubProcedureDefineTemplate(
        const std::string& paramsFromJsonArray,
        const std::string& paramsFromJsonObject,
        const std::string& stubProcedureName,
        const std::string& procedureName,
        const std::string& procedureArgs)
{
   std::string str =
R"(void [stubProcedureName](cppjson::Value& request, const RpcDoneCallback& done) {
    auto& params = request["params"];

    if (params.isArray()) {
        [paramsFromJsonArray]
        convert().[procedureName]([procedureArgs] UserDoneCallback(request, done));
    } else {
        [paramsFromJsonObject]
        convert().[procedureName]([procedureArgs] UserDoneCallback(request, done));
    }
})";

    replaceAll(str, "[paramsFromJsonArray]", paramsFromJsonArray);
    replaceAll(str, "[paramsFromJsonObject]", paramsFromJsonObject);
    replaceAll(str, "[stubProcedureName]", stubProcedureName);
    replaceAll(str, "[procedureName]", procedureName);
    replaceAll(str, "[procedureArgs]", procedureArgs);
    return str;
}

std::string stubProcedureDefineTemplate(
        const std::string& stubProcedureName,
        const std::string& procedureName)
{
    std::string str =
R"(
void [stubProcedureName](cppjson::Value& request, const RpcDoneCallback& done) {
    convert().[procedureName](UserDoneCallback(request, done));
})";

    replaceAll(str, "[stubProcedureName]", stubProcedureName);
    replaceAll(str, "[procedureName]", procedureName);
    return str;
}

std::string stubNotifyDefineTemplate(
        const std::string& paramsFromJsonArray,
        const std::string& paramsFromJsonObject,
        const std::string& stubNotifyName,
        const std::string& notifyName,
        const std::string& notifyArgs)
{
    std::string str =
R"(
void [stubNotifyName](cppjson::Value& request) {
    auto& params = request["params"];

    if (params.isArray()) {
        [paramsFromJsonArray]
        convert().[notifyName]([notifyArgs]);
    } else {
        [paramsFromJsonObject]
        convert().[notifyName]([notifyArgs]);
    }
}
)";

    replaceAll(str, "[notifyName]", notifyName);
    replaceAll(str, "[stubNotifyName]", stubNotifyName);
    const_cast<std::string&>(notifyArgs).pop_back();
    const_cast<std::string&>(notifyArgs).pop_back();//去除最后一个逗号
    replaceAll(str, "[notifyArgs]", notifyArgs);
    replaceAll(str, "[paramsFromJsonArray]", paramsFromJsonArray);
    replaceAll(str, "[paramsFromJsonObject]", paramsFromJsonObject);
    return str;
}

std::string stubNotifyDefineTemplate(
        const std::string& stubNotifyName,
        const std::string& notifyName)
{
    std::string str =
R"(
void [stubNotifyName](cppjson::Value& request) {
    convert().[notifyName]();
})";

    replaceAll(str, "[stubNotifyName]", stubNotifyName);
    replaceAll(str, "[notifyName]", notifyName);
    return str;
}

std::string argsDefineTemplate(
        const std::string& arg,
        const std::string& index,
        cppjson::ValueType type)
{
    std::string str = R"(auto [arg] = params[[index]][method];)";
    std::string method = [=](){
        switch (type) {
            case cppjson::TYPE_BOOL:
                return ".getBool()";
            case cppjson::TYPE_INT32:
                return ".getInt32()";
            case cppjson::TYPE_INT64:
                return ".getInt64()";
            case cppjson::TYPE_DOUBLE:
                return ".getDouble()";
            case cppjson::TYPE_STRING:
                return ".getString()";
            case cppjson::TYPE_OBJECT:
            case cppjson::TYPE_ARRAY:
                return "";//todo
            default:
                assert(false && "bad value type");
        }
    }();
    replaceAll(str, "[arg]", arg);
    replaceAll(str, "[index]", index);
    replaceAll(str, "[method]", method);
    return str;
}

std::string ServiceStubGenerator::genMacroName() {
    std::string result = m_serviceInfo.m_name;
    for (char& c: result) {
        c = static_cast<char>(toupper(c));
    }
    return result.append("SERVICESTUB");
}

std::string ServiceStubGenerator::genUserClassName() {
    return m_serviceInfo.m_name + "Service";
}

std::string ServiceStubGenerator::genStubClassName() {
    return m_serviceInfo.m_name + "ServiceStub";
}

std::string ServiceStubGenerator::genStub() {
    auto  macroName = genMacroName();
    auto  userClassName = genUserClassName();
    auto  stubClassName = genStubClassName();
    auto& serviceName = m_serviceInfo.m_name;;

    auto bindings = genStubProcedureBindings();
    bindings.append(genStubNotifyBindings());

    auto definitions = genStubProcedureDefinitions();
    definitions.append(genStubNotifyDefinitions());

    return serviceStubTemplate(macroName,
                               userClassName,
                               stubClassName,
                               serviceName,
                               bindings,
                               definitions);
}

std::string ServiceStubGenerator::genStubProcedureBindings() {
    std::string result;
    for (auto& p : m_serviceInfo.m_rpcReturn) {
        auto procedureName = p.m_name;
        auto stubClassName = genStubClassName();
        auto stubProcedureName = genStubGenericName(p);
        auto procedureParams = genGenericParams(p);

        auto binding = stubProcedureBindTemplate(
            procedureName,
            stubClassName,
            stubProcedureName,
            procedureParams
        );

        result.append(binding);
        result.append("\n");
    }

    return result;
}

std::string ServiceStubGenerator::genStubNotifyBindings() {
    std::string result;
    for (auto& p: m_serviceInfo.m_rpcNotify) {
        auto notifyName = p.m_name;
        auto stubClassName = genStubClassName();
        auto stubNotifyName = genStubGenericName(p);
        auto notifyParams = genGenericParams(p);

        auto binding = stubNotifyBindTemplate(
                notifyName,
                stubClassName,
                stubNotifyName,
                notifyParams);
        result.append(binding);
        result.append("\n");
    }
    return result;
}

std::string ServiceStubGenerator::genStubProcedureDefinitions() {
    std::string result;
    for (auto& r: m_serviceInfo.m_rpcReturn) {
        auto procedureName = r.m_name;
        auto stubProcedureName = genStubGenericName(r);

        if (r.m_params.getSize() > 0) {
            auto paramsFromJsonArray = genParamsFromJsonArray(r);
            auto paramsFromJsonObject = genParamsFromJsonObject(r);
            auto procedureArgs = genGenericArgs(r);
            auto define = stubProcedureDefineTemplate(
                paramsFromJsonArray,
                paramsFromJsonObject,
                stubProcedureName,
                procedureName,
                procedureArgs
            );
            result.append(define);
            result.append("\n");
        } else {
            auto define = stubProcedureDefineTemplate(
                stubProcedureName,
                procedureName
            );

            result.append(define);
            result.append("\n");
        }
    }
    return result;
}

std::string ServiceStubGenerator::genStubNotifyDefinitions() {
        std::string result;
    for (auto& r: m_serviceInfo.m_rpcNotify) {
        auto notifyName = r.m_name;
        auto stubNotifyName = genStubGenericName(r);

        if (r.m_params.getSize() > 0) {
            auto paramsFromJsonArray = genParamsFromJsonArray(r);
            auto paramsFromJsonObject = genParamsFromJsonObject(r);
            auto notifyArgs = genGenericArgs(r);
            auto define = stubNotifyDefineTemplate(
                    paramsFromJsonArray,
                    paramsFromJsonObject,
                    stubNotifyName,
                    notifyName,
                    notifyArgs);

            result.append(define);
            result.append("\n");
        }
        else {
            auto define = stubNotifyDefineTemplate(
                    stubNotifyName,
                    notifyName);

            result.append(define);
            result.append("\n");
        }
    }
    return result;
}

template <typename Rpc>
std::string ServiceStubGenerator::genStubGenericName(const Rpc& r) {
    return r.m_name + "Stub";
}

template <typename Rpc>
std::string ServiceStubGenerator::genGenericParams(const Rpc& r) {
    std::string result;
    for (auto& m: r.m_params.getObject()) {
        std::string field = "\"" + m.m_key.getString() + "\"";
        std::string type = [&]() {
            switch (m.m_value.getType()) {
                case cppjson::TYPE_BOOL:
                    return "cppjson::TYPE_BOOL";
                case cppjson::TYPE_INT32:
                    return "cppjson::TYPE_INT32";
                case cppjson::TYPE_INT64:
                    return "cppjson::TYPE_INT64";
                case cppjson::TYPE_DOUBLE:
                    return "cppjson::TYPE_DOUBLE";
                case cppjson::TYPE_STRING:
                    return "cppjson::TYPE_STRING";
                case cppjson::TYPE_OBJECT:
                    return "cppjson::TYPE_OBJECT";
                case cppjson::TYPE_ARRAY:
                    return "cppjson::TYPE_ARRAY";
                default:
                    assert(false && "bad value type");
            };
        }();
        result.append(", \n").append(field);
        result.append(", ").append(type);
    }
    return result;
}

template <typename Rpc>
std::string ServiceStubGenerator::genGenericArgs(const Rpc& r) {
    std::string result;
    for (auto& m: r.m_params.getObject()) {
        auto arg = m.m_key.getString();
        result.append(arg);
        result.append(", ");
    }
    return result;
}

template <typename Rpc>
std::string ServiceStubGenerator::genParamsFromJsonArray(const Rpc& r) {
    std::string result;
    int index = 0;
    for (auto& m: r.m_params.getObject()) {
        std::string line = argsDefineTemplate(
                m.m_key.getString(),
                std::to_string(index),
                m.m_value.getType());
        index++;
        result.append(line);
        result.append("\n");
    }
    return result;
}

template <typename Rpc>
std::string ServiceStubGenerator::genParamsFromJsonObject(const Rpc& r) {
    std::string result;
    for (auto& m: r.m_params.getObject()) {
        std::string index = "\"" + m.m_key.getString() + "\"";
        std::string line = argsDefineTemplate(
                m.m_key.getString(),
                index,
                m.m_value.getType());
        result.append(line);
        result.append("\n");
    }
    return result;
}

}